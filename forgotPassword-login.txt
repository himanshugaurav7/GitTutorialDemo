label {
    display: block;
    margin-top: 10px;
  }
  
  .card-container.card {
    max-width: 400px !important;
    padding: 40px 40px;
  }
  
  .card {
    background-color: #f7f7f7;
    padding: 20px 25px 30px;
    margin: 0 auto 25px;
    margin-top: 50px;
    -moz-border-radius: 2px;
    -webkit-border-radius: 2px;
    border-radius: 2px;
    -moz-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);
    -webkit-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);
    box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);
  }
  
  .profile-img-card {
    width: 96px;
    height: 96px;
    margin: 0 auto 10px;
    display: block;
    -moz-border-radius: 50%;
    -webkit-border-radius: 50%;
    border-radius: 50%;
  }

  .bdrop {
    background-color: #bbbbbba2;
    backdrop-filter: blur(1px);
}
.bg-container {
    background-image: url("/assets/poster.jpg");
    width:100%;
    height:auto; 
    border:5px solid red;
    box-sizing:content-box
  }


------------------------------
forgotpassword.component.html

<html class="bg-container">
<div class="col-md-12">
    <div class="card card-container bdrop" >
      <img
        id="profile-img"
        src="//ssl.gstatic.com/accounts/ui/avatar_2x.png"
        class="profile-img-card"
      />
      <!-- <form
        *ngIf="!isLoggedIn"
        name="form"
        (ngSubmit)="f.form.valid && onSubmit()"
        #f="ngForm"
        novalidate
      > -->
      <form name="form" #f="ngForm">
        <div class="form-group">
          <label for="loginId">LoginId</label>
          <input
            type="text"
            class="form-control"
            name="username"
            [(ngModel)]="form.loginId"
            required
          />
          <div
            class="alert alert-danger"
            role="alert"
            *ngIf="form.loginId.errors && f.submitted"
          >
          LoginId is required!
          </div>
        </div>
        <div class="form-group">
          <label for="password">Password</label>
          <input
            type="password"
            class="form-control"
            name="password"
            [(ngModel)]="form.password"
            required
            minlength="4"
            #password="ngModel"
          />
          <div
            class="alert alert-danger"
            role="alert"
            *ngIf="password.errors && f.submitted"
          >
            <div *ngIf="password.errors['required']">Password is required</div>
            <div *ngIf="password.errors['minlength']">
              Password must be at least 4 characters
            </div>
          </div>
        </div>
        <div class="form-group">
            <label for="confirmPassword">Confirm Password</label>
            <input
              type="password"
              class="form-control"
              name="confirmPassword"
              [(ngModel)]="form.confirmPassword"
              required
              minlength="4"
              #password="ngModel"
            />
            <div
              class="alert alert-danger"
              role="alert"
              *ngIf="form.confirmPassword.errors && f.submitted"
            >
              <div *ngIf="form.confirmPassword.errors['required']">Confirm Password is required</div>
              <div *ngIf="form.confirmPassword.errors['minlength']">
                Password must be at least 4 characters
              </div>
            </div>
          </div>
          <br>
        <div class="form-group">
          <button class="btn btn-primary btn-block" (click)="forgotPassword()">
            Save
          </button>
          <button class="btn btn-danger btn-block" (click)="cancel()">
            Cancel
          </button>
          <small class="text-danger text-center"><b>{{errormsg}}</b></small>
        </div>
        <div class="form-group">
          <div
            class="alert alert-danger"
            role="alert"
            *ngIf="f.submitted && status!=true"
          >
            Validation Error: {{ errorMessage }}
          </div>
        </div>
      </form>
  
      <!-- <div class="alert alert-success" *ngIf="isLoggedIn">
        Logged in as {{ roles }}.
      </div> -->
    </div>
  </div>
  </html>

----------------------------------------
forgotpassword.component.spec.ts


import { HttpClientTestingModule } from '@angular/common/http/testing';
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { FormsModule } from '@angular/forms';
import { Router } from '@angular/router';
import { RouterTestingModule } from '@angular/router/testing';
import { of } from 'rxjs';
import { BackendService } from '../backend.service';
import { ForgotPassword } from '../ForgotPassword';

import { ForgotpasswordComponent } from './forgotpassword.component';

describe('ForgotpasswordComponent', () => {
  let component: ForgotpasswordComponent;
  let fixture: ComponentFixture<ForgotpasswordComponent>;
  let service: BackendService
  let router: Router
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ ForgotpasswordComponent ],
      imports: [HttpClientTestingModule, RouterTestingModule.withRoutes([]), FormsModule],
      providers:[ForgotpasswordComponent]
    })
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(ForgotpasswordComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    component = TestBed.inject(ForgotpasswordComponent)
    service = TestBed.inject(BackendService)
    router = TestBed.inject(Router)
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
  describe('forgot password',()=>{
    it('change password',()=>{
      const status='password changed'
      component.form.password='12345'
      component.form.confirmPassword='12345'
      component.forgotPassword();
      spyOn(service,'changePassword').and.returnValue(of(status))
      service.changePassword('12345',new ForgotPassword('12345','12345')).subscribe(data=>{
        expect(data).toEqual(status)
      })
      const navigateSpy = spyOn(router, 'navigate')
      component.forgotPassword();
      expect(navigateSpy).toHaveBeenCalledWith(['']);
    })

    it('reset form',()=>{
      component.cancel()
      const navigateSpy = spyOn(router, 'navigate')
      component.cancel();
      expect(navigateSpy).toHaveBeenCalledWith(['']);
    })
  })
});

----------------

forgotpassword.component.ts

import { HttpErrorResponse } from '@angular/common/http';
import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { BackendService } from '../backend.service';
import { ForgotPassword } from '../ForgotPassword';

@Component({
  selector: 'app-forgotpassword',
  templateUrl: './forgotpassword.component.html',
  styleUrls: ['./forgotpassword.component.css']
})
export class ForgotpasswordComponent implements OnInit {

  status!: boolean;
  errorMessage:string='Password is not matching.'
  message!:string
  errormsg='';
  //updatePassword!:ForgotPassword
  form: any = {
    loginId:'' ,
    password: '',
    confirmPassword:''
  };
  constructor(private service:BackendService,private route:Router) { }

  ngOnInit(): void {
  }

  forgotPassword(){

    if(this.form.password!=this.form.confirmPassword){
      //error("password not matching")
      this.status=false;
       this.errorMessage = "Password is not matching";
   }
   else{
     this.status=true
     console.log(this.form.password)
     //updatePassword :new ForgotPassword(this.form.password,this.form.confirmPassword);
     //console.log(updatePassword)
     this.service.changePassword(this.form.loginId,new ForgotPassword(this.form.password,this.form.confirmPassword) ).subscribe(data=>{
       this.message=data;
       console.log(data)
       alert(this.message);
     this.route.navigate(['']);
    },
    error =>{
      this.errormsg="Please Enter Correct Login ID";
    })
   }
  }
  cancel(){
    this.route.navigate(['']);
  }
}


---------------
login.component.css

label {
    display: block;
    margin-top: 10px;
  }
  
  .card-container.card {
    max-width: 400px !important;
    padding: 40px 40px;
  }
  
  .card {
    background-color: #f7f7f7;
    padding: 20px 25px 30px;
    margin: 0 auto 25px;
    margin-top: 50px;
    -moz-border-radius: 2px;
    -webkit-border-radius: 2px;
    border-radius: 2px;
    -moz-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);
    -webkit-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);
    box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);
  }
  
  .profile-img-card {
    width: 96px;
    height: 96px;
    margin: 0 auto 10px;
    display: block;
    -moz-border-radius: 50%;
    -webkit-border-radius: 50%;
    border-radius: 50%;
  }
  .bdrop {
    background-color: #bbbbbbc0;
    backdrop-filter: blur(1px);
}
.bg-container {
  background-image: url("/assets/poster.jpg");
  width:100%;
  height:600px; 
  border:5px solid red;
  box-sizing:content-box
}

--------------
login.component.html

<html class="bg-container">
<div class="col-md-12">
    <div class="card card-container  bdrop">
      <img
        id="profile-img"
        src="//ssl.gstatic.com/accounts/ui/avatar_2x.png"
        class="profile-img-card"
      />
      <form name="form" #f="ngForm">
        <div class="form-group">
          <label for="username">Username</label>
          <input
            type="text"
            class="form-control"
            name="username"
            [(ngModel)]="form.username"
            required
            #username="ngModel"
          />
          <div
            class="alert alert-danger"
            role="alert"
            *ngIf="username.errors && username.touched"
          >
          <div *ngIf="username.errors['required']">User name is required</div>
          </div>
        </div>
        <div class="form-group">
          <label for="password">Password</label>
          <input
            type="password"
            class="form-control"
            name="password"
            [(ngModel)]="form.password"
            required
            minlength="4"
            #password="ngModel"
          />
          <div
            class="alert alert-danger"
            role="alert"
            *ngIf="password.errors && password.touched"
          >
            <div *ngIf="password.errors['required']">Password is required</div>
            <div *ngIf="password.errors['minlength']">
              Password must be at least 4 characters
            </div>
          </div>
        </div>
        <br>
        <div class="form-group">
          <button class="btn btn-primary btn-block"  (click)="authenticateUser()">
            Login
          </button> 
          <button class="btn btn-primary btn-block" (click)="signUp()">
            SignUp
          </button>
          <button class="btn btn-primary btn-block" (click)="adminLogin()">
            Admin Login
          </button><br>
          <a routerLink="/forgotpassword">Forgot Password</a>
        </div>
        <div class="form-group">
          <div
            class="alert alert-danger"
            role="alert"
            *ngIf="f.submitted && status!=true"
          >
            Login failed: {{ errorMessage }}
          </div>
        </div>
      </form>
  
      <!-- <div class="alert alert-success" *ngIf="isLoggedIn">
        Logged in as {{ roles }}.
      </div> -->
    </div>
  </div>
  </html>


-------------------
login.component.spec.ts

import { HttpClientTestingModule } from '@angular/common/http/testing';
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { FormsModule } from '@angular/forms';
import { Router } from '@angular/router';
import { RouterTestingModule } from '@angular/router/testing';
import { of } from 'rxjs';
import { AppComponent } from '../app.component';
import { BackendService } from '../backend.service';

import { LoginComponent } from './login.component';

describe('LoginComponent', () => {
  let component: LoginComponent;
  let service: BackendService
  let router: Router
  let fixture: ComponentFixture<LoginComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [LoginComponent],
      imports: [HttpClientTestingModule, RouterTestingModule.withRoutes([]), FormsModule],
      providers: [AppComponent, LoginComponent]
    })
      .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(LoginComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    component = TestBed.inject(LoginComponent)
    service = TestBed.inject(BackendService)
    router = TestBed.inject(Router)
  });


  it('should create', () => {
    expect(component).toBeTruthy();
  });
  describe('login component', () => {
    it('authenticate user', () => {
      const status = true
      component.authenticateUser();
      spyOn(service, 'authenticate').and.returnValue(of(status));
      service.authenticate('1234', '12345').subscribe(res => {
        expect(res).toBeTruthy();
      });
      const navigateSpy = spyOn(router, 'navigate')
      component.authenticateUser()
      expect(navigateSpy).toHaveBeenCalledWith(['movieslist']);
    })
    it('sign up',()=>{
      component.signUp()
      const navigateSpy = spyOn(router, 'navigate')
    component.signUp()
    expect(navigateSpy).toHaveBeenCalledWith(['register']);
    })
    it('authenticate admin', () => {
      const status = true
      component.adminLogin();
      spyOn(service, 'authenticate').and.returnValue(of(status));
      service.authenticate('1234', '12345').subscribe(res => {
        expect(res).toBeTruthy();
      });
      const navigateSpy = spyOn(router, 'navigate')
      component.adminLogin()
      expect(navigateSpy).toHaveBeenCalledWith(['movieslist']);
    })
  })
});


----------------

login.component.ts



import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { AppComponent } from '../app.component';
import { BackendService } from '../backend.service';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
export class LoginComponent implements OnInit {
  status!: boolean;
  errorMessage:string='username or password is not correct'
  form: any = {
    username:'' ,
    password!: ''
  };

  constructor(private service:BackendService, private route:Router , private aservice:AppComponent) { }
  authenticateUser(){
    this.service.authenticate(this.form.username, this.form.password).subscribe(data=>{
      this.status=data;
      this.service.status=data
      this.aservice.status=data
      if(this.status==true){
        this.route.navigate(['movieslist'])
      }
    })
    
  }

  signUp(){
    this.route.navigate(['register'])
  }

  adminLogin(){
    this.service.authenticate(this.form.username, this.form.password).subscribe(data=>{
      this.status=data;
      this.service.adminStatus=data
      this.aservice.status=data
      this.service.status=true
      if(this.status==true && this.service.adminStatus==true){
        //this.service.adminStatus=true
        this.route.navigate(['movieslist'])
      }
    })
  }
  ngOnInit(): void {
  }

}