registeruser.component.css

label {
    display: block;
    margin-top: 10px;
  }
  
  .card-container.card {
    max-width: 400px !important;
    padding: 40px 40px;
  }
  
  .card {
    background-color: #f7f7f7;
    padding: 20px 25px 30px;
    margin: 0 auto 25px;
    margin-top: 50px;
    -moz-border-radius: 2px;
    -webkit-border-radius: 2px;
    border-radius: 2px;
    -moz-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);
    -webkit-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);
    box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);
  }
  
  .profile-img-card {
    width: 96px;
    height: 96px;
    margin: 0 auto 10px;
    display: block;
    -moz-border-radius: 50%;
    -webkit-border-radius: 50%;
    border-radius: 50%;
  }

  .bdrop {
    background-color: #bbbbbba2;
    backdrop-filter: blur(1px);
}

.modal-backdrop {
    /* bug fix - no overlay */    
    display: none;    
}
.bg-container {
    background-image: url("/assets/poster.jpg");
    width:100%;
    height:auto; 
    border:5px solid red;
    box-sizing:content-box
  }

----------------------
registeruser.component.html

<html class="bg-container">
<div class="col-md-12 ">
<div class="card card-container bdrop" >
    <img
      id="profile-img"
      src="//ssl.gstatic.com/accounts/ui/avatar_2x.png"
      class="profile-img-card"
    />
    <form [formGroup]="UserForm" #f="ngForm">
        <div class="form-group">
            <label for="loginId">LoginId: </label>
            <input id="loginId" type="text" formControlName="loginId" class="form-control">
            <div *ngIf="loginId.invalid && loginId.touched" class="alert alert-danger">LoginId is required.</div>
        </div>
        <div class="form-group">
            <label for="email">Email: </label>
            <input id="email" type="text" formControlName="email" class="form-control">
            <div *ngIf="email.invalid && email.touched" class="alert alert-danger">Email is required.</div>
            <div *ngIf="email.invalid && email.touched" class="alert alert-danger">Please enter valid email</div>
        </div>
        <div class="form-group">
        <label for="firstName">First Name: </label>
        <input id="firstName" type="text" formControlName="firstName" class="form-control">
        <div *ngIf="firstName.invalid && firstName.touched" class="alert alert-danger">FirstName is required.</div>
    </div>
    <div class="form-group">
        <label for="lastName">Last Name: </label>
        <input id="lastName" type="text" formControlName="lastName" class="form-control">
        <div *ngIf="lastName.invalid && lastName.touched" class="alert alert-danger">LastName is required.</div>
    </div>
        <div class="form-group">
        <label for="password">Password: </label>
        <input id="password" type="password" formControlName="password" class="form-control">
        <div *ngIf="password.invalid && password.touched" class="alert alert-danger">Password is required.</div>
    </div>
    <div class="form-group">
        <label for="confirmPassword">ConfirmPassword: </label>
        <input id="confirmPassword" type="password" formControlName="confirmPassword" class="form-control">
        <div *ngIf="confirmPassword.invalid && confirmPassword.touched" class="alert alert-danger">ConfirmPassword is required.</div>
    </div>
    <div class="form-group">
        <label for="contactNumber">ContactNumber: </label>
        <input id="contactNumber" type="text" formControlName="contactNumber" class="form-control">
        <div *ngIf="contactNumber.invalid && contactNumber.touched" class="alert alert-danger">ContactNumber is required.</div>
        <div *ngIf="contactNumber.invalid && contactNumber.touched" class="alert alert-danger">Please enter correct phone number.</div>
    </div>
    <button class="btn btn-primary" type="submit" [disabled]="!UserForm.valid" (click)="add()">Register</button>
    <button class="btn btn-danger" (click)="cancel()">Cancel</button>
<div *ngIf="f.submitted && !status" class="alert alert-danger">{{errorMessage}}</div>
      </form>
    </div>
</div>
</html>


-----------------------
registeruser.component.spec.ts

import { HttpClientTestingModule } from '@angular/common/http/testing';
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { Router } from '@angular/router';
import { RouterTestingModule } from '@angular/router/testing';
import { of } from 'rxjs';
import { BackendService } from '../backend.service';

import { RegisteruserComponent } from './registeruser.component';

describe('RegisteruserComponent', () => {
  let component: RegisteruserComponent;
  let fixture: ComponentFixture<RegisteruserComponent>;
  let service: BackendService
  let router: Router

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ RegisteruserComponent ],
      imports: [HttpClientTestingModule, RouterTestingModule.withRoutes([]), FormsModule,ReactiveFormsModule],
      providers:[RegisteruserComponent]
    })
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(RegisteruserComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    component = TestBed.inject(RegisteruserComponent)
    service = TestBed.inject(BackendService)
    router = TestBed.inject(Router)
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
  describe('register user',()=>{
    it('add user fail',()=>{
      component.UserForm.controls['password'].setValue('12345')
      component.UserForm.controls['confirmPassword'].setValue('123459')
      component.add()
      expect(component.status).toBeFalsy()
    })
    it('add user pass',()=>{
      const user = {loginId:'nehal99',email:'nehal@gmail.com',firstName:'nehal',lastname:'ahmad',password:'12345'
    ,confirmPassword:'12345',contactNumber:'9876543212'}
      component.UserForm.controls['password'].setValue('12345')
      component.UserForm.controls['confirmPassword'].setValue('12345')
      component.add()
      spyOn(service,'addUser').and.returnValue(of(user))
      service.addUser(user).subscribe(data=>{
        expect(data).toEqual(user)
      })
      const navigateSpy = spyOn(router, 'navigate')
      component.add()
      expect(navigateSpy).toHaveBeenCalledWith(['']);
    })

    it('cancel',()=>{
      //component.cancel()
      const navigateSpy = spyOn(router, 'navigate')
      component.cancel()
      expect(navigateSpy).toHaveBeenCalledWith(['']);
    })
  })
});


----------------------

registeruser.component.ts

import { Component, OnInit } from '@angular/core';
import { FormGroup, FormControl, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { error } from 'console';
import { BackendService } from '../backend.service';
import { User } from '../User';

@Component({
  selector: 'app-registeruser',
  templateUrl: './registeruser.component.html',
  styleUrls: ['./registeruser.component.css']
})
export class RegisteruserComponent implements OnInit {
  errorMessage = '';
  user!:User;
  user1!:User;
  status!:boolean;
  UserForm = new FormGroup({
    loginId: new FormControl('',Validators.required),
    email:new FormControl('',[Validators.required,Validators.pattern("^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$")]),
    firstName: new FormControl('',Validators.required),
    lastName: new FormControl('',Validators.required),
    password:new FormControl('',Validators.required),
    confirmPassword:new FormControl('',Validators.required),
    contactNumber:new FormControl('',[Validators.required, Validators.pattern("^((\\+91-?)|0)?[0-9]{10}$")]),
    
  });
  get loginId(){
    return this.UserForm.controls['loginId']
  }
  get email(){
    return this.UserForm.controls['email']
  }
  get firstName(){
    return this.UserForm.controls['firstName']
  }
  get lastName(){
    return this.UserForm.controls['lastName']
  }
  get password(){
    return this.UserForm.controls['password']
  }
  get confirmPassword(){
    return this.UserForm.controls['confirmPassword']
  }
  get contactNumber(){
    return this.UserForm.controls['contactNumber']
  }

  
  constructor(private service:BackendService, private route:Router) { }

  add(){
    if(this.UserForm.controls['password'].value!=this.UserForm.controls['confirmPassword'].value){
       //error("password not matching")
       this.status=false;
        this.errorMessage = "Password is not matching";
    }
    else{
      this.status=true
      //console.log(this.UserForm.value)
      this.service.addUser(this.UserForm.value).subscribe(data=>{
        this.user=data;
        console.log(data)
      })
      alert("Registration is successful");
      this.route.navigate(['']);
      
    }
  }
  cancel(){
    this.route.navigate(['']);
  }
  ngOnInit(): void {
    // this.user1=this.UserForm.value;
  }

}


-------------------
search-movie.component.html

<div  *ngIf="size!=0">
<table class = "table table-striped">
    <thead>
        <tr>
            <th>Movie Name</th>
            <th>Theatre Name </th>
            <th>Tickets Available</th>   
        </tr>
    </thead>
    <tbody>
        <tr *ngFor= "let movie of movies |paginate:{
            itemsPerPage: tableSize,
            currentPage:page};" >
            <td> {{ movie.key.movieName }} </td>
            <td> {{ movie.key.theatreName }} </td>
            <td>{{ movie.totalNoOfTickets}}</td>
            <td><button class="btn btn-primary" (click)="bookTicket(movie)">Book</button>
                <button *ngIf="status" class="btn btn-danger" (click)="deleteMovie(movie.key.movieName,movie.key.theatreName)">Delete</button>
                <button *ngIf="status" class="btn btn-primary" (click)="movieDetails(movie)">Details</button></td>
    </tr>
    </tbody>
</table>
<div>

    <pagination-controls
        previousLabel="Prev"
        nextLabel="Next"
        (pageChange)="onTableDataChange($event)">
    </pagination-controls>   
</div>
<div>
    <a routerLink="/movieslist">Home</a>
</div>
</div>
<h2 *ngIf="size==0">Movie does not exist.<a routerLink="/movieslist">Back to search</a></h2>
<!-- <mat-paginator #paginator [pageSizeOptions]="[2, 4, 6]" 
showFirstLastButtons></mat-paginator> -->




--------------------------
search-movie.component.spec.ts

import { HttpClientTestingModule } from '@angular/common/http/testing';
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { Router } from '@angular/router';
import { RouterTestingModule } from '@angular/router/testing';
import { NgxPaginationModule } from 'ngx-pagination';
import { of, throwError } from 'rxjs';
import { MoviesService } from '../movies.service';
import { MovieslistComponent } from '../movieslist/movieslist.component';

import { SearchMovieComponent } from './search-movie.component';

describe('SearchMovieComponent', () => {
  let component: SearchMovieComponent;
  let fixture: ComponentFixture<SearchMovieComponent>;
  let service: MoviesService
  let router: Router
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ SearchMovieComponent ],
      imports: [HttpClientTestingModule, RouterTestingModule.withRoutes([]),NgxPaginationModule],
      providers:[SearchMovieComponent]
    })
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(SearchMovieComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    component = TestBed.inject(SearchMovieComponent)
    service = TestBed.inject(MoviesService)
    router = TestBed.inject(Router)
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
  describe('movies list',()=>{
    it('get movies list',()=>{
      const movies =[{key:{movieName:'Apple',theatreName:"PVR"},totalNoOfTickets:250},
      {key:{movieName:'Avenger',theatreName:"PVR"},totalNoOfTickets:350}];
      component.getMovies();
      spyOn(service,'getMovies').and.returnValue(of(movies));
      service.getMovies('A').subscribe(data=>{
        expect(data).toEqual(movies)
      })
      
    })
    it('search movie error',()=>{
      component.movies.length=0
      let movie: any[]=[]
      const movies =[{key:{movieName:'Apple',theatreName:"PVR"},totalNoOfTickets:250},
      {key:{movieName:'Avenger',theatreName:"PVR"},totalNoOfTickets:350}];
      component.getMovies();
      spyOn(service,'getMovies').and.returnValue(throwError({status: 404}))
      
      service.getMovies('A').subscribe(data=>{
      },(error)=>{

      })
    })
    it('book ticket',()=>{
      const movie ={key:{movieName:'RRR',theatreName:"PVR"},totalNoOfTickets:250};
      component.bookTicket(movie);
      const navigateSpy = spyOn(router, 'navigate')
      component.bookTicket(movie)
      expect(navigateSpy).toHaveBeenCalledWith(['bookticket']);
    })

    it('delete movie',()=>{
      const msg='Movie Deleted Successfully'
      let response=''
      component.deleteMovie('RRR','PVR');
      spyOn(service,'deleteMovie').and.returnValue(of(msg));
      service.deleteMovie('RRR','PVR').subscribe(data=>{
        response= data
      })
      expect(response).toEqual(msg)
    })
    it('movie details',()=>{
      const movie ={key:{movieName:'RRR',theatreName:"PVR"},totalNoOfTickets:250};
      component.movieDetails(movie);
      const navigateSpy = spyOn(router, 'navigate')
      component.movieDetails(movie)
      expect(navigateSpy).toHaveBeenCalledWith(['moviedetails']);

    })

    it('change',()=>{
      component.onTableDataChange('')
    })
  })
});


-------------------
search-movie.component.ts

import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { Movies } from '../Movies';
import { MoviesService } from '../movies.service';
import { BackendService } from '../backend.service';

@Component({
  selector: 'app-search-movie',
  templateUrl: './search-movie.component.html',
  styleUrls: ['./search-movie.component.css']
})
export class SearchMovieComponent implements OnInit {

  message!:string
  size!:number
  page: number=1;
  tableSize:number=10;
  movies:Movies[]=[];
  constructor(private service:MoviesService, private route:Router,private aservice: BackendService) { }

  status:boolean=this.aservice.adminStatus
  bookTicket(movie:Movies){
    this.service.movie=movie
    this.route.navigate(['bookticket'])
  }
  ngOnInit(): void {
    this.getMovies()
  }

  getMovies(){
    console.log(this.service.movieName)
    this.service.getMovies(this.service.movieName).subscribe(data=>{
      this.movies=data
     
    },error=>{
      if(this.movies.length==0)
      this.size=0
    })

  }
  deleteMovie(movieName:string, theatreName:string){
    this.service.deleteMovie(movieName,theatreName).subscribe(data=>{
      this.message=data
      alert(data)
      this.aservice.adminStatus=true
      this.getMovies()
    })
  }

  movieDetails(movie:Movies){
    this.service.movie=movie
    this.route.navigate(['moviedetails'])
  }

  onTableDataChange(event:any){
    this.page=event;
    this.getMovies();
  }
}


------------------

ticket-booking.component.css

label {
    display: block;
    margin-top: 10px;
  }
  
  .card-container.card {
    max-width: 400px !important;
    padding: 40px 40px;
  }
  
  .card {
    background-color: #f7f7f7;
    padding: 20px 25px 30px;
    margin: 0 auto 25px;
    margin-top: 50px;
    -moz-border-radius: 2px;
    -webkit-border-radius: 2px;
    border-radius: 2px;
    -moz-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);
    -webkit-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);
    box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);
  }
  
  .profile-img-card {
    width: 96px;
    height: 96px;
    margin: 0 auto 10px;
    display: block;
    -moz-border-radius: 50%;
    -webkit-border-radius: 50%;
    border-radius: 50%;
  }

-------------------
ticket-booking.component.html

<html class="bg-container">
<div *ngIf="!status" class="col-md-12">
    <div class="card card-container  bdrop">
        <ul>
            <p><b>Movie Name : </b>{{movie.key.movieName}}</p>
            <p><b>Movie Theatre : </b>{{movie.key.theatreName}}</p>
            <p><b>Seats Available : </b>{{movie.totalNoOfTickets}}</p>
        </ul>
      <form name="form" #f="ngForm">
          
        <div class="form-group">
          <label for="noOfTickets">No Of Tickets</label>
          <input
            type="text"
            class="form-control"
            name="noOfTickets"
            [(ngModel)]="form.noOfTickets"
            required
            #noOfTickets="ngModel"
          />
          <div
            class="alert alert-danger"
            role="alert"
            *ngIf="noOfTickets.errors && f.submitted"
          >
          <div *ngIf="noOfTickets.errors['required']">No Of Tickets is required!</div>
          
          </div>
        </div>
        <div class="form-group">
          <label for="seatNumber">Seat Number</label>
          <input
            type="text"
            class="form-control"
            name="seatNumber[]"
            [(ngModel)]="form.seatNumber"
            required
            #seatNumber="ngModel"
          />
        </div>
        <div
            class="alert alert-danger"
            role="alert"
            *ngIf="seatNumber.errors && f.submitted"
          >
          <div *ngIf="seatNumber.errors['required']">Please enter seat numbers.</div>
          
        </div>
        <br>
        <div class="form-group">
          <button class="btn btn-primary btn-block" (click)="booking()">
            Book
          </button> 
          <button class="btn btn-danger btn-block" (click)="cancel()">
            Cancel
          </button><br>
        </div>
        <div class="form-group">
          <!-- <div
            class="alert alert-danger"
            role="alert"
            *ngIf="f.submitted && status!=true"
          >
            Login failed: {{ errorMessage }}
          </div> -->
        </div>
      </form>
  
      <!-- <div class="alert alert-success" *ngIf="isLoggedIn">
        Logged in as {{ roles }}.
      </div> -->
    </div>
  </div>
  <h2 *ngIf="status">Tickets booked successfully!!<a routerLink="/movieslist">Back to List. </a></h2>
  </html>


--------------------
ticket-booking.component.spec.ts



import { HttpClientTestingModule } from '@angular/common/http/testing';
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { FormsModule } from '@angular/forms';
import { Router } from '@angular/router';
import { RouterTestingModule } from '@angular/router/testing';
import { of } from 'rxjs';
import { TicketBookingService } from '../ticket-booking.service';
import { Tickets } from '../Tickets';
import { TicketBookingComponent } from './ticket-booking.component';

describe('TicketBookingComponent', () => {
  let component: TicketBookingComponent;
  let fixture: ComponentFixture<TicketBookingComponent>;
  let service: TicketBookingService
  let router: Router

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ TicketBookingComponent ],
      imports: [HttpClientTestingModule, RouterTestingModule.withRoutes([]), FormsModule],
      providers:[TicketBookingComponent]

    })
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(TicketBookingComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    component = TestBed.inject(TicketBookingComponent)
    service = TestBed.inject(TicketBookingService)
    router = TestBed.inject(Router)
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  describe('ticket booking',()=>{
    it('booking', ()=>{
      const msg='Ticket booked successfully'
      //const movie ={key:{movieName:'RRR',theatreName:"PVR"},totalNoOfTickets:250};
      component.booking()
      component.seats=['1','2']
      spyOn(service,'bookTickets').and.returnValue(of(msg))
      service.bookTickets(new Tickets({key:{movieName:'RRR',theatreName:"PVR"},totalNoOfTickets:250},2,['1','2'])).
      subscribe(data=>{
        expect(data).toEqual(msg)
      })

    })
    it('cancel booking',()=>{
      component.cancel()
      const navigateSpy = spyOn(router, 'navigate')
      component.cancel()
      expect(navigateSpy).toHaveBeenCalledWith(['movieslist']);
    })
  })
});


----------------------
ticket-booking.component.ts

import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { Movies } from '../Movies';
import { MoviesService } from '../movies.service';
import { TicketBookingService } from '../ticket-booking.service';
import { Tickets } from '../Tickets';

@Component({
  selector: 'app-ticket-booking',
  templateUrl: './ticket-booking.component.html',
  styleUrls: ['./ticket-booking.component.css']
})
export class TicketBookingComponent implements OnInit {

  status: boolean = false
  message: string = ''
  seats!: string[]
  form: any = {
    noOfTickets: '',
    seatNumber: ''
  };
  constructor(private mservice: MoviesService, private service: TicketBookingService, private route: Router) { }
  movie: Movies = this.mservice.movie
  booking() {
    if (this.form.noOfTickets != '') {
      this.seats = this.form.seatNumber.split(',')
      this.service.bookTickets(new Tickets(this.movie, this.form.noOfTickets, this.seats)).subscribe(data => {
        this.message = data
        this.status = true
        console.log(data)
      })
    }
  }

  cancel() {
    this.route.navigate(['movieslist'])
  }
  ngOnInit(): void {
  }

}