label {
    display: block;
    margin-top: 10px;
  }
  
  .card-container.card {
    max-width: 400px !important;
    padding: 40px 40px;
  }
  
  .card {
    background-color: #f7f7f7;
    padding: 20px 25px 30px;
    margin: 0 auto 25px;
    margin-top: 50px;
    -moz-border-radius: 2px;
    -webkit-border-radius: 2px;
    border-radius: 2px;
    -moz-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);
    -webkit-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);
    box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);
  }
  
  .profile-img-card {
    width: 96px;
    height: 96px;
    margin: 0 auto 10px;
    display: block;
    -moz-border-radius: 50%;
    -webkit-border-radius: 50%;
    border-radius: 50%;
  }

  .bdrop {
    background-color: #bbbbbba2;
    backdrop-filter: blur(1px);
}
.bg-container {
    background-image: url("/assets/poster.jpg");
    width:100%;
    height:auto; 
    border:5px solid red;
    box-sizing:content-box
  }


------------------------------
forgotpassword.component.html

<html class="bg-container">
<div class="col-md-12">
    <div class="card card-container bdrop" >
      <img
        id="profile-img"
        src="//ssl.gstatic.com/accounts/ui/avatar_2x.png"
        class="profile-img-card"
      />
      <!-- <form
        *ngIf="!isLoggedIn"
        name="form"
        (ngSubmit)="f.form.valid && onSubmit()"
        #f="ngForm"
        novalidate
      > -->
      <form name="form" #f="ngForm">
        <div class="form-group">
          <label for="loginId">LoginId</label>
          <input
            type="text"
            class="form-control"
            name="username"
            [(ngModel)]="form.loginId"
            required
          />
          <div
            class="alert alert-danger"
            role="alert"
            *ngIf="form.loginId.errors && f.submitted"
          >
          LoginId is required!
          </div>
        </div>
        <div class="form-group">
          <label for="password">Password</label>
          <input
            type="password"
            class="form-control"
            name="password"
            [(ngModel)]="form.password"
            required
            minlength="4"
            #password="ngModel"
          />
          <div
            class="alert alert-danger"
            role="alert"
            *ngIf="password.errors && f.submitted"
          >
            <div *ngIf="password.errors['required']">Password is required</div>
            <div *ngIf="password.errors['minlength']">
              Password must be at least 4 characters
            </div>
          </div>
        </div>
        <div class="form-group">
            <label for="confirmPassword">Confirm Password</label>
            <input
              type="password"
              class="form-control"
              name="confirmPassword"
              [(ngModel)]="form.confirmPassword"
              required
              minlength="4"
              #password="ngModel"
            />
            <div
              class="alert alert-danger"
              role="alert"
              *ngIf="form.confirmPassword.errors && f.submitted"
            >
              <div *ngIf="form.confirmPassword.errors['required']">Confirm Password is required</div>
              <div *ngIf="form.confirmPassword.errors['minlength']">
                Password must be at least 4 characters
              </div>
            </div>
          </div>
          <br>
        <div class="form-group">
          <button class="btn btn-primary btn-block" (click)="forgotPassword()">
            Save
          </button>
          <button class="btn btn-danger btn-block" (click)="cancel()">
            Cancel
          </button>
          <small class="text-danger text-center"><b>{{errormsg}}</b></small>
        </div>
        <div class="form-group">
          <div
            class="alert alert-danger"
            role="alert"
            *ngIf="f.submitted && status!=true"
          >
            Validation Error: {{ errorMessage }}
          </div>
        </div>
      </form>
  
      <!-- <div class="alert alert-success" *ngIf="isLoggedIn">
        Logged in as {{ roles }}.
      </div> -->
    </div>
  </div>
  </html>

----------------------------------------
forgotpassword.component.spec.ts


import { HttpClientTestingModule } from '@angular/common/http/testing';
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { FormsModule } from '@angular/forms';
import { Router } from '@angular/router';
import { RouterTestingModule } from '@angular/router/testing';
import { of } from 'rxjs';
import { BackendService } from '../backend.service';
import { ForgotPassword } from '../ForgotPassword';

import { ForgotpasswordComponent } from './forgotpassword.component';

describe('ForgotpasswordComponent', () => {
  let component: ForgotpasswordComponent;
  let fixture: ComponentFixture<ForgotpasswordComponent>;
  let service: BackendService
  let router: Router
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ ForgotpasswordComponent ],
      imports: [HttpClientTestingModule, RouterTestingModule.withRoutes([]), FormsModule],
      providers:[ForgotpasswordComponent]
    })
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(ForgotpasswordComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    component = TestBed.inject(ForgotpasswordComponent)
    service = TestBed.inject(BackendService)
    router = TestBed.inject(Router)
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
  describe('forgot password',()=>{
    it('change password',()=>{
      const status='password changed'
      component.form.password='12345'
      component.form.confirmPassword='12345'
      component.forgotPassword();
      spyOn(service,'changePassword').and.returnValue(of(status))
      service.changePassword('12345',new ForgotPassword('12345','12345')).subscribe(data=>{
        expect(data).toEqual(status)
      })
      const navigateSpy = spyOn(router, 'navigate')
      component.forgotPassword();
      expect(navigateSpy).toHaveBeenCalledWith(['']);
    })

    it('reset form',()=>{
      component.cancel()
      const navigateSpy = spyOn(router, 'navigate')
      component.cancel();
      expect(navigateSpy).toHaveBeenCalledWith(['']);
    })
  })
});

----------------

forgotpassword.component.ts

import { HttpErrorResponse } from '@angular/common/http';
import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { BackendService } from '../backend.service';
import { ForgotPassword } from '../ForgotPassword';

@Component({
  selector: 'app-forgotpassword',
  templateUrl: './forgotpassword.component.html',
  styleUrls: ['./forgotpassword.component.css']
})
export class ForgotpasswordComponent implements OnInit {

  status!: boolean;
  errorMessage:string='Password is not matching.'
  message!:string
  errormsg='';
  //updatePassword!:ForgotPassword
  form: any = {
    loginId:'' ,
    password: '',
    confirmPassword:''
  };
  constructor(private service:BackendService,private route:Router) { }

  ngOnInit(): void {
  }

  forgotPassword(){

    if(this.form.password!=this.form.confirmPassword){
      //error("password not matching")
      this.status=false;
       this.errorMessage = "Password is not matching";
   }
   else{
     this.status=true
     console.log(this.form.password)
     //updatePassword :new ForgotPassword(this.form.password,this.form.confirmPassword);
     //console.log(updatePassword)
     this.service.changePassword(this.form.loginId,new ForgotPassword(this.form.password,this.form.confirmPassword) ).subscribe(data=>{
       this.message=data;
       console.log(data)
       alert(this.message);
     this.route.navigate(['']);
    },
    error =>{
      this.errormsg="Please Enter Correct Login ID";
    })
   }
  }
  cancel(){
    this.route.navigate(['']);
  }
}


---------------
login.component.css

label {
    display: block;
    margin-top: 10px;
  }
  
  .card-container.card {
    max-width: 400px !important;
    padding: 40px 40px;
  }
  
  .card {
    background-color: #f7f7f7;
    padding: 20px 25px 30px;
    margin: 0 auto 25px;
    margin-top: 50px;
    -moz-border-radius: 2px;
    -webkit-border-radius: 2px;
    border-radius: 2px;
    -moz-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);
    -webkit-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);
    box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);
  }
  
  .profile-img-card {
    width: 96px;
    height: 96px;
    margin: 0 auto 10px;
    display: block;
    -moz-border-radius: 50%;
    -webkit-border-radius: 50%;
    border-radius: 50%;
  }
  .bdrop {
    background-color: #bbbbbbc0;
    backdrop-filter: blur(1px);
}
.bg-container {
  background-image: url("/assets/poster.jpg");
  width:100%;
  height:600px; 
  border:5px solid red;
  box-sizing:content-box
}

--------------
login.component.html

<html class="bg-container">
<div class="col-md-12">
    <div class="card card-container  bdrop">
      <img
        id="profile-img"
        src="//ssl.gstatic.com/accounts/ui/avatar_2x.png"
        class="profile-img-card"
      />
      <form name="form" #f="ngForm">
        <div class="form-group">
          <label for="username">Username</label>
          <input
            type="text"
            class="form-control"
            name="username"
            [(ngModel)]="form.username"
            required
            #username="ngModel"
          />
          <div
            class="alert alert-danger"
            role="alert"
            *ngIf="username.errors && username.touched"
          >
          <div *ngIf="username.errors['required']">User name is required</div>
          </div>
        </div>
        <div class="form-group">
          <label for="password">Password</label>
          <input
            type="password"
            class="form-control"
            name="password"
            [(ngModel)]="form.password"
            required
            minlength="4"
            #password="ngModel"
          />
          <div
            class="alert alert-danger"
            role="alert"
            *ngIf="password.errors && password.touched"
          >
            <div *ngIf="password.errors['required']">Password is required</div>
            <div *ngIf="password.errors['minlength']">
              Password must be at least 4 characters
            </div>
          </div>
        </div>
        <br>
        <div class="form-group">
          <button class="btn btn-primary btn-block"  (click)="authenticateUser()">
            Login
          </button> 
          <button class="btn btn-primary btn-block" (click)="signUp()">
            SignUp
          </button>
          <button class="btn btn-primary btn-block" (click)="adminLogin()">
            Admin Login
          </button><br>
          <a routerLink="/forgotpassword">Forgot Password</a>
        </div>
        <div class="form-group">
          <div
            class="alert alert-danger"
            role="alert"
            *ngIf="f.submitted && status!=true"
          >
            Login failed: {{ errorMessage }}
          </div>
        </div>
      </form>
  
      <!-- <div class="alert alert-success" *ngIf="isLoggedIn">
        Logged in as {{ roles }}.
      </div> -->
    </div>
  </div>
  </html>


-------------------
login.component.spec.ts

import { HttpClientTestingModule } from '@angular/common/http/testing';
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { FormsModule } from '@angular/forms';
import { Router } from '@angular/router';
import { RouterTestingModule } from '@angular/router/testing';
import { of } from 'rxjs';
import { AppComponent } from '../app.component';
import { BackendService } from '../backend.service';

import { LoginComponent } from './login.component';

describe('LoginComponent', () => {
  let component: LoginComponent;
  let service: BackendService
  let router: Router
  let fixture: ComponentFixture<LoginComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [LoginComponent],
      imports: [HttpClientTestingModule, RouterTestingModule.withRoutes([]), FormsModule],
      providers: [AppComponent, LoginComponent]
    })
      .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(LoginComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    component = TestBed.inject(LoginComponent)
    service = TestBed.inject(BackendService)
    router = TestBed.inject(Router)
  });


  it('should create', () => {
    expect(component).toBeTruthy();
  });
  describe('login component', () => {
    it('authenticate user', () => {
      const status = true
      component.authenticateUser();
      spyOn(service, 'authenticate').and.returnValue(of(status));
      service.authenticate('1234', '12345').subscribe(res => {
        expect(res).toBeTruthy();
      });
      const navigateSpy = spyOn(router, 'navigate')
      component.authenticateUser()
      expect(navigateSpy).toHaveBeenCalledWith(['movieslist']);
    })
    it('sign up',()=>{
      component.signUp()
      const navigateSpy = spyOn(router, 'navigate')
    component.signUp()
    expect(navigateSpy).toHaveBeenCalledWith(['register']);
    })
    it('authenticate admin', () => {
      const status = true
      component.adminLogin();
      spyOn(service, 'authenticate').and.returnValue(of(status));
      service.authenticate('1234', '12345').subscribe(res => {
        expect(res).toBeTruthy();
      });
      const navigateSpy = spyOn(router, 'navigate')
      component.adminLogin()
      expect(navigateSpy).toHaveBeenCalledWith(['movieslist']);
    })
  })
});


----------------

login.component.ts



import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { AppComponent } from '../app.component';
import { BackendService } from '../backend.service';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
export class LoginComponent implements OnInit {
  status!: boolean;
  errorMessage:string='username or password is not correct'
  form: any = {
    username:'' ,
    password!: ''
  };

  constructor(private service:BackendService, private route:Router , private aservice:AppComponent) { }
  authenticateUser(){
    this.service.authenticate(this.form.username, this.form.password).subscribe(data=>{
      this.status=data;
      this.service.status=data
      this.aservice.status=data
      if(this.status==true){
        this.route.navigate(['movieslist'])
      }
    })
    
  }

  signUp(){
    this.route.navigate(['register'])
  }

  adminLogin(){
    this.service.authenticate(this.form.username, this.form.password).subscribe(data=>{
      this.status=data;
      this.service.adminStatus=data
      this.aservice.status=data
      this.service.status=true
      if(this.status==true && this.service.adminStatus==true){
        //this.service.adminStatus=true
        this.route.navigate(['movieslist'])
      }
    })
  }
  ngOnInit(): void {
  }

}


--------------------------
movies-details.component.css

label {
    display: block;
    margin-top: 10px;
  }
  
  .card-container.card {
    max-width: 400px !important;
    padding: 40px 40px;
  }
  
  .card {
    background-color: #f7f7f7;
    padding: 20px 25px 30px;
    margin: 0 auto 25px;
    margin-top: 50px;
    -moz-border-radius: 2px;
    -webkit-border-radius: 2px;
    border-radius: 2px;
    -moz-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);
    -webkit-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);
    box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);
  }
  

------------------------
movies-details.component.html


<html class="bg-container">
<div *ngIf="status" class="col-md-12">
    <div class="card card-container  bdrop">
        <ul>
            <p><b>Movie Name : </b>{{movie.key.movieName}}</p>
            <p><b>Movie Theatre : </b>{{movie.key.theatreName}}</p>
            <p><b>Total Seats : </b>{{totalSeats}}</p>
            <p><b>Seats Available : </b>{{movie.totalNoOfTickets}}</p>
            <p><b>Seats Booked : </b>{{output}}</p>
        </ul>
        <a routerLink="/movieslist">Back</a>
    </div>
    
</div>
</html>



-----------------

movies-details.component.spec.ts



import { HttpClientTestingModule } from '@angular/common/http/testing';
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { Router } from '@angular/router';
import { RouterTestingModule } from '@angular/router/testing';
import { of } from 'rxjs';
import { MoviesService } from '../movies.service';

import { MoviesDetailsComponent } from './movies-details.component';

describe('MoviesDetailsComponent', () => {
  let component: MoviesDetailsComponent;
  let fixture: ComponentFixture<MoviesDetailsComponent>;
  let service: MoviesService
  let router: Router
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ MoviesDetailsComponent ],
      imports: [HttpClientTestingModule, RouterTestingModule.withRoutes([])],
      providers:[MoviesDetailsComponent]
    })
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(MoviesDetailsComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    component = TestBed.inject(MoviesDetailsComponent)
    service = TestBed.inject(MoviesService)
    router = TestBed.inject(Router)
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
  describe('movie detail',()=>{
    it('movie details',()=>{
      component.movieDetails();
      spyOn(service,'movieDetails').and.returnValue(of(5))
      service.movieDetails('RRR','PVR').subscribe(data=>{
        expect(data).toEqual(5)
      })
    })
  })
});


--------------------------

movies-details.component.ts

import { Component, OnInit } from '@angular/core';
import { BackendService } from '../backend.service';
import { MoviesService } from '../movies.service';

@Component({
  selector: 'app-movies-details',
  templateUrl: './movies-details.component.html',
  styleUrls: ['./movies-details.component.css']
})
export class MoviesDetailsComponent implements OnInit {

  totalSeats:number=0
  output!:number
  constructor(private service:MoviesService, private aservice:BackendService) { }
  movie=this.service.movie
  status:boolean=this.aservice.adminStatus
  ngOnInit(): void {
    this.movieDetails();
  }
  movieDetails(){
    this.service.movieDetails(this.movie.key.movieName,this.movie.key.theatreName).subscribe(data=>{
      this.output=data
      this.totalSeats=this.output+this.movie.totalNoOfTickets
    })
      
  }

}


-------------------

movieslist.component.html


            <div class="input-group">
                <div class="form-outline">
                  <input type="search" class="form-control" [(ngModel)]="name" placeholder="Search Movie"/>
                </div>
                <button type="button" class="btn btn-primary" (click)="getMovie()">
                  <i class="fa fa-search"></i>
                </button>
              </div>
<table class = "table table-striped">
    <thead>
        <tr>
            <th>Movie Name</th>
            <th>Theatre Name </th>
            <th>Tickets Available</th>   
        </tr>
    </thead>
    <tbody>
        <tr *ngFor= "let movie of movies |paginate:{
            itemsPerPage: tableSize,
            currentPage:page};" >
            <td> {{ movie.key.movieName }} </td>
            <td> {{ movie.key.theatreName }} </td>
            <td>{{ movie.totalNoOfTickets}}</td>
            <td><button class="btn btn-primary" (click)="bookTicket(movie)">Book</button>
                <button *ngIf="status" class="btn btn-danger" (click)="deleteMovie(movie.key.movieName,movie.key.theatreName)">Delete</button>
                <button *ngIf="status" class="btn btn-primary" (click)="movieDetails(movie)">Details</button></td>
            
    </tr>
    </tbody>
</table>
<div>

    <pagination-controls
        previousLabel="Prev"
        nextLabel="Next"
        (pageChange)="onTableDataChange($event)">
    </pagination-controls>   
</div>
<!-- <mat-paginator #paginator [pageSizeOptions]="[2, 4, 6]" 
showFirstLastButtons></mat-paginator> -->




-------------------------


movieslist.component.spec.ts

import { HttpClientTestingModule } from '@angular/common/http/testing';
import { NgModule } from '@angular/core';
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { Router } from '@angular/router';
import { RouterTestingModule } from '@angular/router/testing';
import { of } from 'rxjs';
import { LoginComponent } from '../login/login.component';
import { MoviesService } from '../movies.service';
import { NgxPaginationModule } from 'ngx-pagination';

import { MovieslistComponent } from './movieslist.component';

describe('MovieslistComponent', () => {
  let component: MovieslistComponent;
  let fixture: ComponentFixture<MovieslistComponent>;
  let service: MoviesService
  let router: Router
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ MovieslistComponent ],
      imports: [HttpClientTestingModule, RouterTestingModule.withRoutes([]),NgxPaginationModule],
      providers:[MovieslistComponent]
    })
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(MovieslistComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    component = TestBed.inject(MovieslistComponent)
    service = TestBed.inject(MoviesService)
    router = TestBed.inject(Router)
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
  describe('movies list',()=>{
    it('get movies list',()=>{
      const movies =[{key:{movieName:'RRR',theatreName:"PVR"},totalNoOfTickets:250},
      {key:{movieName:'Avenger',theatreName:"PVR"},totalNoOfTickets:350}];
      component.getMoviesList();
      spyOn(service,'getAllMovies').and.returnValue(of(movies));
      service.getAllMovies().subscribe(data=>{
        expect(data).toEqual(movies)
      })
      
    })
    it('get movie',()=>{
        component.getMovie();
      })
      it('get movie',()=>{
        component.name='RRR'
        component.getMovie();
        const navigateSpy = spyOn(router, 'navigate')
      component.getMovie()
      expect(navigateSpy).toHaveBeenCalledWith(['search']);
      })
    it('book ticket',()=>{
      const movie ={key:{movieName:'RRR',theatreName:"PVR"},totalNoOfTickets:250};
      component.bookTicket(movie);
      const navigateSpy = spyOn(router, 'navigate')
      component.bookTicket(movie)
      expect(navigateSpy).toHaveBeenCalledWith(['bookticket']);
    })

    it('delete movie',()=>{
      const msg='Movie Deleted Successfully'
      let response=''
      component.deleteMovie('RRR','PVR');
      spyOn(service,'deleteMovie').and.returnValue(of(msg));
      service.deleteMovie('RRR','PVR').subscribe(data=>{
        response= data
      })
      expect(response).toEqual(msg)
    })
    it('movie details',()=>{
      const movie ={key:{movieName:'RRR',theatreName:"PVR"},totalNoOfTickets:250};
      component.movieDetails(movie);
      const navigateSpy = spyOn(router, 'navigate')
      component.movieDetails(movie)
      expect(navigateSpy).toHaveBeenCalledWith(['moviedetails']);

    })

    it('change',()=>{
      component.onTableDataChange('')
    })
  })
});


-------------------------

movieslist.component.ts

import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { BackendService } from '../backend.service';
import { Movies } from '../Movies';
import { MoviesService } from '../movies.service';

@Component({
  selector: 'app-movieslist',
  templateUrl: './movieslist.component.html',
  styleUrls: ['./movieslist.component.css']
})
export class MovieslistComponent implements OnInit {
  message!:string
  name:string=''
  page: number=1;
  tableSize:number=10;
  movies:Movies[]=[];
  constructor(private service:MoviesService, private route:Router, private aservice: BackendService) { }

  status:boolean=this.aservice.adminStatus
  getMoviesList(){
    this.service.getAllMovies().subscribe(data=>{
      this.movies=data
    })
  }

  getMovie(){
    console.log(this.name)
    if(this.name==''){
      alert("Please Enter movie name")
    }
    else{
      this.service.movieName=this.name
      this.route.navigate(['search'])
    }

  }
  onTableDataChange(event:any){
    this.page=event;
    this.getMoviesList();
  }
  bookTicket(movie:Movies){
    this.service.movie=movie
    this.route.navigate(['bookticket'])
  }

  deleteMovie(movieName:string, theatreName:string){
    this.service.deleteMovie(movieName,theatreName).subscribe(data=>{
      this.message=data
      alert(data)
      this.aservice.adminStatus=true
      this.getMoviesList()
    })
  }
  movieDetails(movie:Movies){
    this.service.movie=movie
    this.route.navigate(['moviedetails'])
  }
  ngOnInit(): void {
    this.getMoviesList();
  }

}


----------------------------
registeruser.component.css

label {
    display: block;
    margin-top: 10px;
  }
  
  .card-container.card {
    max-width: 400px !important;
    padding: 40px 40px;
  }
  
  .card {
    background-color: #f7f7f7;
    padding: 20px 25px 30px;
    margin: 0 auto 25px;
    margin-top: 50px;
    -moz-border-radius: 2px;
    -webkit-border-radius: 2px;
    border-radius: 2px;
    -moz-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);
    -webkit-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);
    box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);
  }
  
  .profile-img-card {
    width: 96px;
    height: 96px;
    margin: 0 auto 10px;
    display: block;
    -moz-border-radius: 50%;
    -webkit-border-radius: 50%;
    border-radius: 50%;
  }

  .bdrop {
    background-color: #bbbbbba2;
    backdrop-filter: blur(1px);
}

.modal-backdrop {
    /* bug fix - no overlay */    
    display: none;    
}
.bg-container {
    background-image: url("/assets/poster.jpg");
    width:100%;
    height:auto; 
    border:5px solid red;
    box-sizing:content-box
  }

----------------------
registeruser.component.html

<html class="bg-container">
<div class="col-md-12 ">
<div class="card card-container bdrop" >
    <img
      id="profile-img"
      src="//ssl.gstatic.com/accounts/ui/avatar_2x.png"
      class="profile-img-card"
    />
    <form [formGroup]="UserForm" #f="ngForm">
        <div class="form-group">
            <label for="loginId">LoginId: </label>
            <input id="loginId" type="text" formControlName="loginId" class="form-control">
            <div *ngIf="loginId.invalid && loginId.touched" class="alert alert-danger">LoginId is required.</div>
        </div>
        <div class="form-group">
            <label for="email">Email: </label>
            <input id="email" type="text" formControlName="email" class="form-control">
            <div *ngIf="email.invalid && email.touched" class="alert alert-danger">Email is required.</div>
            <div *ngIf="email.invalid && email.touched" class="alert alert-danger">Please enter valid email</div>
        </div>
        <div class="form-group">
        <label for="firstName">First Name: </label>
        <input id="firstName" type="text" formControlName="firstName" class="form-control">
        <div *ngIf="firstName.invalid && firstName.touched" class="alert alert-danger">FirstName is required.</div>
    </div>
    <div class="form-group">
        <label for="lastName">Last Name: </label>
        <input id="lastName" type="text" formControlName="lastName" class="form-control">
        <div *ngIf="lastName.invalid && lastName.touched" class="alert alert-danger">LastName is required.</div>
    </div>
        <div class="form-group">
        <label for="password">Password: </label>
        <input id="password" type="password" formControlName="password" class="form-control">
        <div *ngIf="password.invalid && password.touched" class="alert alert-danger">Password is required.</div>
    </div>
    <div class="form-group">
        <label for="confirmPassword">ConfirmPassword: </label>
        <input id="confirmPassword" type="password" formControlName="confirmPassword" class="form-control">
        <div *ngIf="confirmPassword.invalid && confirmPassword.touched" class="alert alert-danger">ConfirmPassword is required.</div>
    </div>
    <div class="form-group">
        <label for="contactNumber">ContactNumber: </label>
        <input id="contactNumber" type="text" formControlName="contactNumber" class="form-control">
        <div *ngIf="contactNumber.invalid && contactNumber.touched" class="alert alert-danger">ContactNumber is required.</div>
        <div *ngIf="contactNumber.invalid && contactNumber.touched" class="alert alert-danger">Please enter correct phone number.</div>
    </div>
    <button class="btn btn-primary" type="submit" [disabled]="!UserForm.valid" (click)="add()">Register</button>
    <button class="btn btn-danger" (click)="cancel()">Cancel</button>
<div *ngIf="f.submitted && !status" class="alert alert-danger">{{errorMessage}}</div>
      </form>
    </div>
</div>
</html>


-----------------------
registeruser.component.spec.ts

import { HttpClientTestingModule } from '@angular/common/http/testing';
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { Router } from '@angular/router';
import { RouterTestingModule } from '@angular/router/testing';
import { of } from 'rxjs';
import { BackendService } from '../backend.service';

import { RegisteruserComponent } from './registeruser.component';

describe('RegisteruserComponent', () => {
  let component: RegisteruserComponent;
  let fixture: ComponentFixture<RegisteruserComponent>;
  let service: BackendService
  let router: Router

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ RegisteruserComponent ],
      imports: [HttpClientTestingModule, RouterTestingModule.withRoutes([]), FormsModule,ReactiveFormsModule],
      providers:[RegisteruserComponent]
    })
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(RegisteruserComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    component = TestBed.inject(RegisteruserComponent)
    service = TestBed.inject(BackendService)
    router = TestBed.inject(Router)
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
  describe('register user',()=>{
    it('add user fail',()=>{
      component.UserForm.controls['password'].setValue('12345')
      component.UserForm.controls['confirmPassword'].setValue('123459')
      component.add()
      expect(component.status).toBeFalsy()
    })
    it('add user pass',()=>{
      const user = {loginId:'nehal99',email:'nehal@gmail.com',firstName:'nehal',lastname:'ahmad',password:'12345'
    ,confirmPassword:'12345',contactNumber:'9876543212'}
      component.UserForm.controls['password'].setValue('12345')
      component.UserForm.controls['confirmPassword'].setValue('12345')
      component.add()
      spyOn(service,'addUser').and.returnValue(of(user))
      service.addUser(user).subscribe(data=>{
        expect(data).toEqual(user)
      })
      const navigateSpy = spyOn(router, 'navigate')
      component.add()
      expect(navigateSpy).toHaveBeenCalledWith(['']);
    })

    it('cancel',()=>{
      //component.cancel()
      const navigateSpy = spyOn(router, 'navigate')
      component.cancel()
      expect(navigateSpy).toHaveBeenCalledWith(['']);
    })
  })
});


----------------------

registeruser.component.ts

import { Component, OnInit } from '@angular/core';
import { FormGroup, FormControl, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { error } from 'console';
import { BackendService } from '../backend.service';
import { User } from '../User';

@Component({
  selector: 'app-registeruser',
  templateUrl: './registeruser.component.html',
  styleUrls: ['./registeruser.component.css']
})
export class RegisteruserComponent implements OnInit {
  errorMessage = '';
  user!:User;
  user1!:User;
  status!:boolean;
  UserForm = new FormGroup({
    loginId: new FormControl('',Validators.required),
    email:new FormControl('',[Validators.required,Validators.pattern("^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$")]),
    firstName: new FormControl('',Validators.required),
    lastName: new FormControl('',Validators.required),
    password:new FormControl('',Validators.required),
    confirmPassword:new FormControl('',Validators.required),
    contactNumber:new FormControl('',[Validators.required, Validators.pattern("^((\\+91-?)|0)?[0-9]{10}$")]),
    
  });
  get loginId(){
    return this.UserForm.controls['loginId']
  }
  get email(){
    return this.UserForm.controls['email']
  }
  get firstName(){
    return this.UserForm.controls['firstName']
  }
  get lastName(){
    return this.UserForm.controls['lastName']
  }
  get password(){
    return this.UserForm.controls['password']
  }
  get confirmPassword(){
    return this.UserForm.controls['confirmPassword']
  }
  get contactNumber(){
    return this.UserForm.controls['contactNumber']
  }

  
  constructor(private service:BackendService, private route:Router) { }

  add(){
    if(this.UserForm.controls['password'].value!=this.UserForm.controls['confirmPassword'].value){
       //error("password not matching")
       this.status=false;
        this.errorMessage = "Password is not matching";
    }
    else{
      this.status=true
      //console.log(this.UserForm.value)
      this.service.addUser(this.UserForm.value).subscribe(data=>{
        this.user=data;
        console.log(data)
      })
      alert("Registration is successful");
      this.route.navigate(['']);
      
    }
  }
  cancel(){
    this.route.navigate(['']);
  }
  ngOnInit(): void {
    // this.user1=this.UserForm.value;
  }

}


-------------------
search-movie.component.html

<div  *ngIf="size!=0">
<table class = "table table-striped">
    <thead>
        <tr>
            <th>Movie Name</th>
            <th>Theatre Name </th>
            <th>Tickets Available</th>   
        </tr>
    </thead>
    <tbody>
        <tr *ngFor= "let movie of movies |paginate:{
            itemsPerPage: tableSize,
            currentPage:page};" >
            <td> {{ movie.key.movieName }} </td>
            <td> {{ movie.key.theatreName }} </td>
            <td>{{ movie.totalNoOfTickets}}</td>
            <td><button class="btn btn-primary" (click)="bookTicket(movie)">Book</button>
                <button *ngIf="status" class="btn btn-danger" (click)="deleteMovie(movie.key.movieName,movie.key.theatreName)">Delete</button>
                <button *ngIf="status" class="btn btn-primary" (click)="movieDetails(movie)">Details</button></td>
    </tr>
    </tbody>
</table>
<div>

    <pagination-controls
        previousLabel="Prev"
        nextLabel="Next"
        (pageChange)="onTableDataChange($event)">
    </pagination-controls>   
</div>
<div>
    <a routerLink="/movieslist">Home</a>
</div>
</div>
<h2 *ngIf="size==0">Movie does not exist.<a routerLink="/movieslist">Back to search</a></h2>
<!-- <mat-paginator #paginator [pageSizeOptions]="[2, 4, 6]" 
showFirstLastButtons></mat-paginator> -->




--------------------------
search-movie.component.spec.ts

import { HttpClientTestingModule } from '@angular/common/http/testing';
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { Router } from '@angular/router';
import { RouterTestingModule } from '@angular/router/testing';
import { NgxPaginationModule } from 'ngx-pagination';
import { of, throwError } from 'rxjs';
import { MoviesService } from '../movies.service';
import { MovieslistComponent } from '../movieslist/movieslist.component';

import { SearchMovieComponent } from './search-movie.component';

describe('SearchMovieComponent', () => {
  let component: SearchMovieComponent;
  let fixture: ComponentFixture<SearchMovieComponent>;
  let service: MoviesService
  let router: Router
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ SearchMovieComponent ],
      imports: [HttpClientTestingModule, RouterTestingModule.withRoutes([]),NgxPaginationModule],
      providers:[SearchMovieComponent]
    })
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(SearchMovieComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    component = TestBed.inject(SearchMovieComponent)
    service = TestBed.inject(MoviesService)
    router = TestBed.inject(Router)
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
  describe('movies list',()=>{
    it('get movies list',()=>{
      const movies =[{key:{movieName:'Apple',theatreName:"PVR"},totalNoOfTickets:250},
      {key:{movieName:'Avenger',theatreName:"PVR"},totalNoOfTickets:350}];
      component.getMovies();
      spyOn(service,'getMovies').and.returnValue(of(movies));
      service.getMovies('A').subscribe(data=>{
        expect(data).toEqual(movies)
      })
      
    })
    it('search movie error',()=>{
      component.movies.length=0
      let movie: any[]=[]
      const movies =[{key:{movieName:'Apple',theatreName:"PVR"},totalNoOfTickets:250},
      {key:{movieName:'Avenger',theatreName:"PVR"},totalNoOfTickets:350}];
      component.getMovies();
      spyOn(service,'getMovies').and.returnValue(throwError({status: 404}))
      
      service.getMovies('A').subscribe(data=>{
      },(error)=>{

      })
    })
    it('book ticket',()=>{
      const movie ={key:{movieName:'RRR',theatreName:"PVR"},totalNoOfTickets:250};
      component.bookTicket(movie);
      const navigateSpy = spyOn(router, 'navigate')
      component.bookTicket(movie)
      expect(navigateSpy).toHaveBeenCalledWith(['bookticket']);
    })

    it('delete movie',()=>{
      const msg='Movie Deleted Successfully'
      let response=''
      component.deleteMovie('RRR','PVR');
      spyOn(service,'deleteMovie').and.returnValue(of(msg));
      service.deleteMovie('RRR','PVR').subscribe(data=>{
        response= data
      })
      expect(response).toEqual(msg)
    })
    it('movie details',()=>{
      const movie ={key:{movieName:'RRR',theatreName:"PVR"},totalNoOfTickets:250};
      component.movieDetails(movie);
      const navigateSpy = spyOn(router, 'navigate')
      component.movieDetails(movie)
      expect(navigateSpy).toHaveBeenCalledWith(['moviedetails']);

    })

    it('change',()=>{
      component.onTableDataChange('')
    })
  })
});


-------------------
search-movie.component.ts

import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { Movies } from '../Movies';
import { MoviesService } from '../movies.service';
import { BackendService } from '../backend.service';

@Component({
  selector: 'app-search-movie',
  templateUrl: './search-movie.component.html',
  styleUrls: ['./search-movie.component.css']
})
export class SearchMovieComponent implements OnInit {

  message!:string
  size!:number
  page: number=1;
  tableSize:number=10;
  movies:Movies[]=[];
  constructor(private service:MoviesService, private route:Router,private aservice: BackendService) { }

  status:boolean=this.aservice.adminStatus
  bookTicket(movie:Movies){
    this.service.movie=movie
    this.route.navigate(['bookticket'])
  }
  ngOnInit(): void {
    this.getMovies()
  }

  getMovies(){
    console.log(this.service.movieName)
    this.service.getMovies(this.service.movieName).subscribe(data=>{
      this.movies=data
     
    },error=>{
      if(this.movies.length==0)
      this.size=0
    })

  }
  deleteMovie(movieName:string, theatreName:string){
    this.service.deleteMovie(movieName,theatreName).subscribe(data=>{
      this.message=data
      alert(data)
      this.aservice.adminStatus=true
      this.getMovies()
    })
  }

  movieDetails(movie:Movies){
    this.service.movie=movie
    this.route.navigate(['moviedetails'])
  }

  onTableDataChange(event:any){
    this.page=event;
    this.getMovies();
  }
}


------------------

ticket-booking.component.css

label {
    display: block;
    margin-top: 10px;
  }
  
  .card-container.card {
    max-width: 400px !important;
    padding: 40px 40px;
  }
  
  .card {
    background-color: #f7f7f7;
    padding: 20px 25px 30px;
    margin: 0 auto 25px;
    margin-top: 50px;
    -moz-border-radius: 2px;
    -webkit-border-radius: 2px;
    border-radius: 2px;
    -moz-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);
    -webkit-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);
    box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);
  }
  
  .profile-img-card {
    width: 96px;
    height: 96px;
    margin: 0 auto 10px;
    display: block;
    -moz-border-radius: 50%;
    -webkit-border-radius: 50%;
    border-radius: 50%;
  }

-------------------
ticket-booking.component.html

<html class="bg-container">
<div *ngIf="!status" class="col-md-12">
    <div class="card card-container  bdrop">
        <ul>
            <p><b>Movie Name : </b>{{movie.key.movieName}}</p>
            <p><b>Movie Theatre : </b>{{movie.key.theatreName}}</p>
            <p><b>Seats Available : </b>{{movie.totalNoOfTickets}}</p>
        </ul>
      <form name="form" #f="ngForm">
          
        <div class="form-group">
          <label for="noOfTickets">No Of Tickets</label>
          <input
            type="text"
            class="form-control"
            name="noOfTickets"
            [(ngModel)]="form.noOfTickets"
            required
            #noOfTickets="ngModel"
          />
          <div
            class="alert alert-danger"
            role="alert"
            *ngIf="noOfTickets.errors && f.submitted"
          >
          <div *ngIf="noOfTickets.errors['required']">No Of Tickets is required!</div>
          
          </div>
        </div>
        <div class="form-group">
          <label for="seatNumber">Seat Number</label>
          <input
            type="text"
            class="form-control"
            name="seatNumber[]"
            [(ngModel)]="form.seatNumber"
            required
            #seatNumber="ngModel"
          />
        </div>
        <div
            class="alert alert-danger"
            role="alert"
            *ngIf="seatNumber.errors && f.submitted"
          >
          <div *ngIf="seatNumber.errors['required']">Please enter seat numbers.</div>
          
        </div>
        <br>
        <div class="form-group">
          <button class="btn btn-primary btn-block" (click)="booking()">
            Book
          </button> 
          <button class="btn btn-danger btn-block" (click)="cancel()">
            Cancel
          </button><br>
        </div>
        <div class="form-group">
          <!-- <div
            class="alert alert-danger"
            role="alert"
            *ngIf="f.submitted && status!=true"
          >
            Login failed: {{ errorMessage }}
          </div> -->
        </div>
      </form>
  
      <!-- <div class="alert alert-success" *ngIf="isLoggedIn">
        Logged in as {{ roles }}.
      </div> -->
    </div>
  </div>
  <h2 *ngIf="status">Tickets booked successfully!!<a routerLink="/movieslist">Back to List. </a></h2>
  </html>


--------------------
ticket-booking.component.spec.ts



import { HttpClientTestingModule } from '@angular/common/http/testing';
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { FormsModule } from '@angular/forms';
import { Router } from '@angular/router';
import { RouterTestingModule } from '@angular/router/testing';
import { of } from 'rxjs';
import { TicketBookingService } from '../ticket-booking.service';
import { Tickets } from '../Tickets';
import { TicketBookingComponent } from './ticket-booking.component';

describe('TicketBookingComponent', () => {
  let component: TicketBookingComponent;
  let fixture: ComponentFixture<TicketBookingComponent>;
  let service: TicketBookingService
  let router: Router

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ TicketBookingComponent ],
      imports: [HttpClientTestingModule, RouterTestingModule.withRoutes([]), FormsModule],
      providers:[TicketBookingComponent]

    })
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(TicketBookingComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    component = TestBed.inject(TicketBookingComponent)
    service = TestBed.inject(TicketBookingService)
    router = TestBed.inject(Router)
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  describe('ticket booking',()=>{
    it('booking', ()=>{
      const msg='Ticket booked successfully'
      //const movie ={key:{movieName:'RRR',theatreName:"PVR"},totalNoOfTickets:250};
      component.booking()
      component.seats=['1','2']
      spyOn(service,'bookTickets').and.returnValue(of(msg))
      service.bookTickets(new Tickets({key:{movieName:'RRR',theatreName:"PVR"},totalNoOfTickets:250},2,['1','2'])).
      subscribe(data=>{
        expect(data).toEqual(msg)
      })

    })
    it('cancel booking',()=>{
      component.cancel()
      const navigateSpy = spyOn(router, 'navigate')
      component.cancel()
      expect(navigateSpy).toHaveBeenCalledWith(['movieslist']);
    })
  })
});


----------------------
ticket-booking.component.ts

import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { Movies } from '../Movies';
import { MoviesService } from '../movies.service';
import { TicketBookingService } from '../ticket-booking.service';
import { Tickets } from '../Tickets';

@Component({
  selector: 'app-ticket-booking',
  templateUrl: './ticket-booking.component.html',
  styleUrls: ['./ticket-booking.component.css']
})
export class TicketBookingComponent implements OnInit {

  status: boolean = false
  message: string = ''
  seats!: string[]
  form: any = {
    noOfTickets: '',
    seatNumber: ''
  };
  constructor(private mservice: MoviesService, private service: TicketBookingService, private route: Router) { }
  movie: Movies = this.mservice.movie
  booking() {
    if (this.form.noOfTickets != '') {
      this.seats = this.form.seatNumber.split(',')
      this.service.bookTickets(new Tickets(this.movie, this.form.noOfTickets, this.seats)).subscribe(data => {
        this.message = data
        this.status = true
        console.log(data)
      })
    }
  }

  cancel() {
    this.route.navigate(['movieslist'])
  }
  ngOnInit(): void {
  }

}


-------------------------
app-routing.module.ts

import { Component, NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { AuthguardService } from './authguard.service';
import { ForgotpasswordComponent } from './forgotpassword/forgotpassword.component';
import { LoginComponent } from './login/login.component';
import { MoviesDetailsComponent } from './movies-details/movies-details.component';
import { MovieslistComponent } from './movieslist/movieslist.component';
import { RegisteruserComponent } from './registeruser/registeruser.component';
import { SearchMovieComponent } from './search-movie/search-movie.component';
import { TicketBookingComponent } from './ticket-booking/ticket-booking.component';

const routes: Routes = [{path:'',component:LoginComponent},
{path:'register', component:RegisteruserComponent},
{path:'movieslist', component: MovieslistComponent, canActivate: [AuthguardService]},
{path :'forgotpassword',component:ForgotpasswordComponent},
{path:'search', component:SearchMovieComponent,canActivate: [AuthguardService]},
{path:'bookticket', component:TicketBookingComponent,canActivate: [AuthguardService]},
{path:'moviedetails',component:MoviesDetailsComponent,canActivate: [AuthguardService]}];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }


------------------
app.component.css


.bg-container {
    background-image: url("/assets/poster.jpg");
    width:100%;
    height:100%; 
    border:5px solid red;
    box-sizing:content-box
  }
  .navbar-nav {
    margin-left:1200px;
}


-----------------
app.component.html

<div class="header">
    <div class="navbar navbar-expand-lg navbar-dark bg-dark">
      <div class="col-lg-6 col-md-6 col-xs-6 col-sm-6">
  
        <div class="collapse navbar-collapse" id="navbarNav">
          <h2 class="navbar-brand">
            Movie Booking App
          </h2>
          <ul class="navbar-nav ml-auto">
            <li class="nav-item">
              <a *ngIf ="status" class="nav-link" routerLink="/" (click)="logout()">Logout</a>
            </li>
          </ul>
          
        </div>
      </div>
    </div>
  </div>
<router-outlet>
</router-outlet>
<div class="bg-blue py-4 footer">
    <div class="row "> <small class="fottext">Copyright &copy; 2023. All rights reserved.</small>
        <div class="social-contact ml-4 ml-sm-auto">
          <span class="fa fa-facebook mr-4 text-sm"></span>
          <span class="fa fa-google-plus mr-4 text-sm"></span>
          <span class="fa fa-linkedin mr-4 text-sm"></span> 
          <span class="fa fa-twitter mr-4 mr-sm-5 text-sm"></span> 
      </div>
    </div>
</div>


-----------------------
app.component.spec.ts

import { HttpClientTestingModule } from '@angular/common/http/testing';
import { TestBed, ComponentFixture } from '@angular/core/testing';
import { RouterTestingModule } from '@angular/router/testing';
import { of } from 'rxjs';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  let component=AppComponent.prototype;
  let fixture: ComponentFixture<AppComponent>;
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
        HttpClientTestingModule
      ],
      declarations: [
        AppComponent
      ],
      providers:[AppComponent]
    }).compileComponents();
  });
  beforeEach(()=>{
    fixture = TestBed.createComponent(AppComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    component=TestBed.inject(AppComponent)
  })

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it(`should have as title 'moviebookingapp'`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('moviebookingapp');
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('.content span')?.textContent).toContain('moviebookingapp app is running!');
  });
  describe('logout',()=>{
  it('should check logout',()=>{
    component.logout()
  })
})
  
});


-------------------
app.component.ts

import { Component } from '@angular/core';
import { BackendService } from './backend.service';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'moviebookingapp';
  status:boolean=false
  constructor( private service:BackendService){}
  
  logout(){
    this.service.status=false
    this.service.adminStatus=false
    this.status=false
  }
}

------------------
app.module.ts

import { HttpClientModule } from '@angular/common/http';
import { NgModule } from '@angular/core';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { BrowserModule } from '@angular/platform-browser';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { LoginComponent } from './login/login.component';
import { RegisteruserComponent } from './registeruser/registeruser.component';
import { MovieslistComponent } from './movieslist/movieslist.component';
import { ForgotpasswordComponent } from './forgotpassword/forgotpassword.component';
import { NgxPaginationModule } from 'ngx-pagination';
import { SearchMovieComponent } from './search-movie/search-movie.component';
import { TicketBookingComponent } from './ticket-booking/ticket-booking.component';
import { MoviesDetailsComponent } from './movies-details/movies-details.component';

@NgModule({
  declarations: [
    AppComponent,
    LoginComponent,
    RegisteruserComponent,
    MovieslistComponent,
    ForgotpasswordComponent,
    SearchMovieComponent,
    TicketBookingComponent,
    MoviesDetailsComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    FormsModule,
    HttpClientModule,
    ReactiveFormsModule,
    NgxPaginationModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }


--------------------
authguard.service.spec.ts

import { HttpClientTestingModule } from '@angular/common/http/testing';
import { TestBed } from '@angular/core/testing';
import { Router } from '@angular/router';
import { RouterTestingModule } from '@angular/router/testing';

import { AuthguardService } from './authguard.service';

describe('AuthguardService', () => {
  let service: AuthguardService;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [HttpClientTestingModule,RouterTestingModule],
      providers:[AuthguardService]
    });
    service = TestBed.inject(AuthguardService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
  
});


--------------------
authguard.service.ts

import { Injectable } from '@angular/core';
import { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';
import { Observable } from 'rxjs';
import { BackendService } from './backend.service';

@Injectable({
  providedIn: 'root'
})
export class AuthguardService implements CanActivate{

  constructor(private routeService:BackendService, private route:Router) { }
  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | UrlTree | Observable<boolean | UrlTree> | Promise<boolean | UrlTree> {
    if(this.routeService.status==false){
      alert("You are not eligible to access this page without login")
        this.route.navigate(["/"])
    }
    return true;
  }
}


--------------------
backend.service.spec.ts

import { TestBed } from '@angular/core/testing';
import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';
import { of } from 'rxjs';

import { BackendService } from './backend.service';
import { ForgotPassword } from './ForgotPassword';
import { HttpClient } from '@angular/common/http';

describe('BackendService', () => {
  let service: BackendService;
  let httpMock: HttpTestingController;
  let httpClient: HttpClient;
  beforeEach(() => {
    
    TestBed.configureTestingModule({
      imports: [HttpClientTestingModule],
      providers:[BackendService]
    });
    service = TestBed.get(BackendService);
    httpMock = TestBed.inject(HttpTestingController);
    httpClient = TestBed.inject(HttpClient);
  });
  describe('authenticate',()=>{
    it('should return true or false',()=>{
  const status=true
    // spyOn(service,'authenticate').and.returnValue(of(status));
    service.authenticate('1234','12345').subscribe(res=>{
      expect(res).toBeTruthy();
    });
    const mockRequest = httpMock.expectOne('http://localhost:9093/api/v1.0/moviebooking/login/1234/12345');
    expect(mockRequest.request.method).toEqual('GET')
    mockRequest.flush(status)
  });
  it('should return user',()=>{
    const user={loginId!:'1234',email!:'nehal@gmail.com',firstName!:'nehal',lastname!:'ahmad',
  password!:'12345',confirmPassword!:'12345',contactNumber!:'9876543211'
};
  let responce={};
  //spyOn(service,'addUser').and.returnValue(of(user));
  service.addUser(user).subscribe(res=>{
    expect(res).toEqual(user);
  });
  const mockRequest = httpMock.expectOne('http://localhost:9093/api/v1.0/moviebooking/register');
    expect(mockRequest.request.method).toEqual('POST')
    mockRequest.flush(user)
});
it('should return string',()=>{
 const msg = 'Password changed successfully';let responce='';
// spyOn(service,'changePassword').and.returnValue(of(msg));
service.changePassword('nehal123', new ForgotPassword('12345','123456')).subscribe(res=>{
  expect(res).toEqual(msg);
});
const mockRequest = httpMock.expectOne('http://localhost:9093/api/v1.0/moviebooking/nehal123/forgot');
expect(mockRequest.request.method).toEqual('PUT')
mockRequest.flush(msg)
});
  });
});


--------------------
backend.service.ts

import { Injectable } from '@angular/core';
import {HttpClient, HttpErrorResponse} from '@angular/common/http';
import { User } from './User';
import { catchError, Observable } from 'rxjs';
import { ForgotPassword } from './ForgotPassword';

@Injectable({
  providedIn: 'root'
})
export class BackendService {
  adminStatus:boolean=false
  status:boolean=false
  user!:User;
  private url='http://localhost:9093/api/v1.0/moviebooking';
  constructor(private httpClient:HttpClient) { }

  authenticate(loginId:string, password:string):Observable<boolean>{
     return this.httpClient.get<boolean>(this.url+'/login/'+loginId+'/'+password);

  }

  addUser(user:User):Observable<User>{
    return this.httpClient.post<User>(this.url+'/register',user);
  }
  changePassword(loginId:string,forgotPassword:ForgotPassword){
    return this.httpClient.put(this.url+"/"+loginId+'/forgot',forgotPassword, { responseType: 'text' });
  }
}


-----------------------
CompositeKey.ts

export class CompositeKey{
    movieName:string=''
    theatreName:string=''
}

--------------------------
ForgotPassword.ts

export class ForgotPassword{
    constructor(
   public password:string='',
    public confirmPassword:string=''){

    }
}

------------------------------
movies.service.spec.ts

import { TestBed } from '@angular/core/testing';
import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';

import { MoviesService } from './movies.service';
import { of } from 'rxjs';
import { HttpClient } from '@angular/common/http';

describe('MoviesService', () => {
  let service: MoviesService;
  let httpMock: HttpTestingController;
  let httpClient: HttpClient;
  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [HttpClientTestingModule],
      providers:[MoviesService]
    });
    service = TestBed.inject(MoviesService);
    httpMock = TestBed.inject(HttpTestingController);
    httpClient = TestBed.inject(HttpClient);
  });
  it('should be created', () => {
    expect(service).toBeTruthy();
  });
  describe('',()=>{
    it('get all movies',()=>{
      let response=[{}]
      const movies =[{key:{movieName:'RRR',theatreName:"PVR"},totalNoOfTickets:250},
      {key:{movieName:'Avenger',theatreName:"PVR"},totalNoOfTickets:350}];
      service.getAllMovies().subscribe(data=>{
        expect(data).toEqual(movies)
      })
      const mockRequest = httpMock.expectOne('http://localhost:9093/api/v1.0/moviebooking/all');
    expect(mockRequest.request.method).toEqual('GET')
    mockRequest.flush(movies)
    })

    it('get searched movies',()=>{
      let response=[{}]
      const movies =[{key:{movieName:'RRR',theatreName:"PVR"},totalNoOfTickets:250},
      {key:{movieName:'Avenger',theatreName:"PVR"},totalNoOfTickets:350}];
      service.getMovies('RRR').subscribe(data=>{
        expect(data).toEqual(movies)
      })
      const mockRequest = httpMock.expectOne('http://localhost:9093/api/v1.0/moviebooking/movies/search/RRR');
    expect(mockRequest.request.method).toEqual('GET')
    mockRequest.flush(movies)
    })

    it('delete movie',()=>{
      const movie ={key:{movieName:'RRR',theatreName:"PVR"},totalNoOfTickets:250};
      service.deleteMovie('RRR','PVR').subscribe(data=>{
        expect(data).toEqual("movie deleted successfully")
      })
      const mockRequest = httpMock.expectOne('http://localhost:9093/api/v1.0/moviebooking/RRR/PVR/delete');
    expect(mockRequest.request.method).toEqual('DELETE')
    })

    it('movie details',()=>{
      const movie ={key:{movieName:'RRR',theatreName:"PVR"},totalNoOfTickets:250};
      service.movieDetails('RRR','PVR').subscribe(data=>{
        expect(data).toEqual(0)
      })
      const mockRequest = httpMock.expectOne('http://localhost:9093/api/v1.0/moviebooking/bookedmovies/RRR/PVR');
    expect(mockRequest.request.method).toEqual('GET')
    })
  })
});


------------------------
movies.service.ts

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { Movies } from './Movies';

@Injectable({
  providedIn: 'root'
})
export class MoviesService {
  
  movie!:Movies
  movieName:string=''
  private url='http://localhost:9093/api/v1.0/moviebooking';
  constructor(private httpClient:HttpClient) { }

  getAllMovies():Observable<Movies[]>{
    return this.httpClient.get<Movies[]>(this.url+'/all')

  }
  getMovies(movieName:string):Observable<Movies[]>{
    return this.httpClient.get<Movies[]>(this.url+'/movies/search/'+movieName)
  }

  deleteMovie(movieName:string, theatreName:string){
    return this.httpClient.delete(this.url+'/'+movieName+'/'+theatreName+'/delete',{ responseType: 'text' })
  }

  movieDetails(movieName:string, theatreName:string):Observable<number>{
    return this.httpClient.get<number>(this.url+'/bookedmovies/'+movieName+'/'+theatreName)
  }
}


------------------------
Movies.ts


import { CompositeKey } from "./CompositeKey";

export class Movies{
    key!:CompositeKey
    totalNoOfTickets!:number
}

--------------------------
ticket-booking.service.spec.ts

import { HttpClient } from '@angular/common/http';
import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';
import { TestBed } from '@angular/core/testing';

import { TicketBookingService } from './ticket-booking.service';
import { Tickets } from './Tickets';

describe('TicketBookingService', () => {
  let service: TicketBookingService;
  let httpMock: HttpTestingController;
  let httpClient: HttpClient;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [HttpClientTestingModule],
      providers:[TicketBookingService]
    });
    service = TestBed.inject(TicketBookingService);
    httpMock = TestBed.inject(HttpTestingController);
    httpClient = TestBed.inject(HttpClient);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
  describe('book ticket',()=>{
    it('book ticket',()=>{
      //const ticket = {movie:{key:{movieName:'RRR',theatreName:"PVR"},totalNoOfTickets:250},
    //noOfTickets:2,seatNumber:[1,2]}
    service.bookTickets(new Tickets({key:{movieName:'RRR',theatreName:"PVR"},totalNoOfTickets:250},
    2,['1','2'])).subscribe(data=>{
      expect(data).toEqual('tickets booked')
    })
    const mockRequest = httpMock.expectOne('http://localhost:9093/api/v1.0/moviebooking/book');
    expect(mockRequest.request.method).toEqual('POST')
    })
  })
});


----------------------------
ticket-booking.service.ts

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { Tickets } from './Tickets';

@Injectable({
  providedIn: 'root'
})
export class TicketBookingService {

  private url='http://localhost:9093/api/v1.0/moviebooking';
  constructor(private httpClient:HttpClient) { }
  bookTickets(ticket:Tickets){
    return this.httpClient.post(this.url+'/book',ticket,{ responseType: 'text' })
  }
}


---------------------------
Tickets.ts

import { Movies } from "./Movies";

export class Tickets{
    constructor(
   public movie:Movies,
    public noOfTickets:number,
   public seatNumber:string[]=[]){

    }
}

-------------------------------
User.ts

export class User{
    loginId!:string
    email!:string
    firstName!:string
    lastname!:string
    password!:string
    confirmPassword!:string
    contactNumber!:string
}


---------------------------
index.html

<!doctype html>
<html lang="en">
<head>
  <head>
    <meta charset="utf-8">
    <title>MovieBookingApp</title>
    <base href="/">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" type="image/x-icon" href="favicon.ico">
    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
  </head>
</head>
<body>
  <app-root></app-root>  
</body>
</html>


--------------------
main.ts

import { enableProdMode } from '@angular/core';
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { AppModule } from './app/app.module';
import { environment } from './environments/environment';

if (environment.production) {
  enableProdMode();
}

platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.error(err));


-----------------------
polyfills.ts


/**
 * This file includes polyfills needed by Angular and is loaded before the app.
 * You can add your own extra polyfills to this file.
 *
 * This file is divided into 2 sections:
 *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.
 *   2. Application imports. Files imported after ZoneJS that should be loaded before your main
 *      file.
 *
 * The current setup is for so-called "evergreen" browsers; the last versions of browsers that
 * automatically update themselves. This includes recent versions of Safari, Chrome (including
 * Opera), Edge on the desktop, and iOS and Chrome on mobile.
 *
 * Learn more in https://angular.io/guide/browser-support
 */

/***************************************************************************************************
 * BROWSER POLYFILLS
 */

/**
 * By default, zone.js will patch all possible macroTask and DomEvents
 * user can disable parts of macroTask/DomEvents patch by setting following flags
 * because those flags need to be set before `zone.js` being loaded, and webpack
 * will put import in the top of bundle, so user need to create a separate file
 * in this directory (for example: zone-flags.ts), and put the following flags
 * into that file, and then add the following code before importing zone.js.
 * import './zone-flags';
 *
 * The flags allowed in zone-flags.ts are listed here.
 *
 * The following flags will work for all browsers.
 *
 * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame
 * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick
 * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames
 *
 *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js
 *  with the following flag, it will bypass `zone.js` patch for IE/Edge
 *
 *  (window as any).__Zone_enable_cross_context_check = true;
 *
 */

/***************************************************************************************************
 * Zone JS is required by default for Angular itself.
 */
import 'zone.js';  // Included with Angular CLI.


/***************************************************************************************************
 * APPLICATION IMPORTS
 */


-----------------------------
styles.css

/* You can add global styles to this file, and also import other style files */
@import "~bootstrap/dist/css/bootstrap.css"

------------------------------
test.ts

// This file is required by karma.conf.js and loads recursively all the .spec and framework files

import 'zone.js/testing';
import { getTestBed } from '@angular/core/testing';
import {
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting
} from '@angular/platform-browser-dynamic/testing';

declare const require: {
  context(path: string, deep?: boolean, filter?: RegExp): {
    <T>(id: string): T;
    keys(): string[];
  };
};

// First, initialize the Angular testing environment.
getTestBed().initTestEnvironment(
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting(),
);

// Then we find all the tests.
const context = require.context('./', true, /\.spec\.ts$/);
// And load the modules.
context.keys().map(context);












